import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class InsufficientFundsException extends RuntimeException {
    public InsufficientFundsException(String message) {
        super(message);
    }
}

class NegativeAmountException extends RuntimeException {
    public NegativeAmountException(String message) {
        super(message);
    }
}

class AccountNotFoundException extends RuntimeException {
    public AccountNotFoundException(String message) {
        super(message);
    }
}

class BankAccount {
    private int accountNumber;
    private String accountName;
    private double balance;

    public BankAccount(int accountNumber, String accountName, double initialDeposit) {
        this.accountNumber = accountNumber;
        this.accountName = accountName;
        this.balance = initialDeposit;
    }

    public void deposit(double amount) {
        if (amount < 0) {
            throw new NegativeAmountException("Amount should be positive for deposit.");
        }
        this.balance += amount;
    }

    public void withdraw(double amount) {
        if (amount < 0) {
            throw new NegativeAmountException("Amount should be positive for withdrawal.");
        }
        if (amount > balance) {
            throw new InsufficientFundsException("Insufficient funds for withdrawal.");
        }
        this.balance -= amount;
    }

    public double getBalance() {
        return balance;
    }

    public String getAccountSummary() {
        return "Account Number: " + accountNumber +
                ", Account Name: " + accountName +
                ", Balance: " + balance;
    }

    public int getAccountNumber() {
        return accountNumber;
    }
}

class Bank {
    private List<BankAccount> accounts;

    public Bank() {
        this.accounts = new ArrayList<>();
    }

    public BankAccount createAccount(String accountName, double initialDeposit) {
        int accountNumber = accounts.size() + 1;
        BankAccount account = new BankAccount(accountNumber, accountName, initialDeposit);
        accounts.add(account);
        return account;
    }

    public BankAccount findAccount(int accountNumber) {
        for (BankAccount account : accounts) {
            if (account.getAccountNumber() == accountNumber) {
                return account;
            }
        }
        throw new AccountNotFoundException("Account with number " + accountNumber + " not found.");
    }

    public void transferMoney(int fromAccountNumber, int toAccountNumber, double amount) {
        BankAccount fromAccount = findAccount(fromAccountNumber);
        BankAccount toAccount = findAccount(toAccountNumber);

        fromAccount.withdraw(amount);
        toAccount.deposit(amount);
    }
}

public class BankTest {

    @Test
    void testBankAccountOperations() {
        Bank bank = new Bank();
        BankAccount account1 = bank.createAccount("Alice", 1000);
        BankAccount account2 = bank.createAccount("Bob", 500);

        // Test deposit
        account1.deposit(200);
        assertEquals(1200, account1.getBalance());

        // Test withdrawal
        account1.withdraw(300);
        assertEquals(900, account1.getBalance());

        // Test insufficient funds exception
        assertThrows(InsufficientFundsException.class, () -> account2.withdraw(600));

        // Test negative amount exception
        assertThrows(NegativeAmountException.class, () -> account1.deposit(-100));

        // Test find account
        BankAccount foundAccount = bank.findAccount(account1.getAccountNumber());
        assertEquals(account1, foundAccount);

        // Test account not found exception
        assertThrows(AccountNotFoundException.class, () -> bank.findAccount(999));

        // Test money transfer
        bank.transferMoney(account1.getAccountNumber(), account2.getAccountNumber(), 200);
        assertEquals(700, account1.getBalance());
        assertEquals(700, account2.getBalance());
    }
}
